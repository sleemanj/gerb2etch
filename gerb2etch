#!/bin/bash
RESOLUTION=600            # Resolution to output, below 600 not recommended for etching
PRE_TRIM=1                # 1/0 Trim the source image (you must have an outline in the image in this case)
B_WHITE=1                 # padding to alignment frame (mm)
B_BLACK=0.25              # alignment frame border width (mm)
B_SEPAR=30.4              # separation width between frames (mm)
ROTATE=0                  # rotate the images first
SHRINK_DRILL=0            # shrnk drills
SHRINK_MIN_METRIC=0.4     # shrink drill minimum size in mm
SHRINK_PERCENT=35         # shrink drill by percent
REMOVE_TINY_HOLES=0       # completely remove holes that are already smaller than SHRINK_MIN_METRIC
UNBURY_HOLES=1            # add a mask for all holes, even buried vias
UNBURY_DIAM_METRIC=1.3    # minimum diameter of the mask in mm for ALL holes when UNBURY_HOLES == 1
SHOW_HOLES_IN_MASK=0      # show the center holes of pads in the soldermask artwork
NEGATIVE="copper"         # these will be inverted to produce artwork for negative acting resist
                          # for dry film, set copper negative, for toner transfer and positive resist nothing negative
                          # you can also put silk and mask in negative if useful to you
WHAT=""                   # copper mask silk top bottom; blank for all turned on
MAX_PAGE_X_MM=180         # the maximum "x" dimension (mm) that the PDF will be produced in
MAX_PAGE_Y_MM=267         # the maximum "y" dimension (mm) that the PDF will be produced in
                          #  ** Note - if the values you put here are larger (or nearly larger) than your actual paper size, 
                          #  your pdf viewer, or printer, may shrink the output to fit.  So make sure to set the value significantly
                          #  less than the actual paper size (eg for A4, 180x267 will allow about 15mm on each edge)
                          #  it should allow you to get two sides of a 10x10 PCB on the same sheet (landscape)       
                          #  the pdf will be produced in whichever orientation fits best
SCALE_X=1              # If your printer needs some help with dimensional accuracy, you can set a scaling factor
SCALE_Y=1              # If your printer needs some help with dimensional accuracy, you can set a scaling factor
EOC=$((LINENO-1))

while getopts ":r:s:p:b:zx:y:Xn:tuhdVD" OPT
do
  case $OPT in
    h)
      cat <<EOM
Usage: $0 [options] [layer] [layer] ...
 
Options
-------
   -r Resolution in dpi, eg "-r 1200"   
   -u Short hand for negative acting UV exposure (eg dry-film), negates copper, sets layer output to copper and mask
   -t Short hand for toner transfer, negates mask and paste (stencil) (but doesn't output by default), sets layer output to copper only
   -z Rotate artwork (portrait becomes landscape, landscape becomes portrait)
   
   -n Specifically set the layers to negate, eg -n "copper mask" makes copper and mask negative
       Definition of negative
       ----------------------
         copper: traces will be transparent
         mask:   pads will be transparent
         silk:   text will be transparent
         paste (stencil):  pads will be transparent
   
   -p Padding in mm from edge of artworks to edge of alignment frames, always transparent, eg "-p 1"
   -b Frame border width in mm, eg "-b 0.25"
   -s Separation distance between artwork frames in mm, eg "-s 30.4"
   
   -d Shrink drill holes by $SHRINK_PERCENT% (but no smaller than $SHRINK_MIN_METRIC mm)
      Note that the pads do not shrink, just the etched holes, useful for better centering of drills
      especially in larger holes.
   
   -dd As for -d, but also completely remove any holes that are *already* smaller than $SHRINK_MIN_METRIC mm
       This is useful when you have small vias inside pads of 0 ohm SMD resistors so that you can use either
       a top-trace between vias when professionally manufactured, or a 0 ohm "resistor" on the bottom
       when you are etching your own and thus don't need to drill the small vias.       
   
   -V Do not untent/unbury vias.  By default all drill holes will be masked with a minimum circular mask of $UNBURY_DIAM_METRIC mm
      This will have the effect of masking ALL holes even if the solder mask gerber doesn't include them (tented/buried vias).
      A side effect is that all through hole pad masks will be a minimum diameter of $UNBURY_DIAM_METRIC mm
      For home-etched boards you probably want all vias exposed so you can solder wire/rivets through them after your
      soldermask is applied.  If you are electroplating however you might want to turn this off and so bury/tent the plated
      vias under soldermask as a professional board house would do (assuming you have specified buried/tented vias of course).
   
   -D Include holes in the solder mask pads, by default the masks do not have holes so that slight mis-alignment is less 
      of a problem.
   
   -X Do not pre-trim the artwork, this means that the border added by gerbv will be kept in the artwork.
   
   -x Scale the X dimension by a given factor, eg "-x 1.05" makes the X dimension 5% longer
   
   -y Scale the Y dimension by a given factor, eg "-y 0.95" makes the Y dimension 5% shorter
   
Layers   
-------
   Available layers are copper mask silk paste top bottom
   
   Eg, to get just the copper artworks
   : $0 [options] copper
   
   For just the bottom artworks
   :  $0 [options] bottom
   
   For just the copper on the bottom
   :  $0 [options] copper bottom
   
   For just the copper and silk on the top
   :  $0 [options] copper silk top
   
   For just the top paste (stencil)
   : $0 [options] top paste
   
   
Defaults
--------
   Defaults can be set by editing the configuration variables at the top of $0

$(cat $0 | head -$EOC | tail -n +2)

EOM
exit
    ;;
    
    u)
      NEGATIVE="copper"      
      WHAT="copper mask"
    ;;
    
    t)
      NEGATIVE="mask paste" 
      WHAT="copper"
    ;;
    
    n)
      NEGATIVE="$OPTARG"
    ;;
    
    z)
      ROTATE=1
    ;;
    
    x)
      SCALE_X=$OPTARG
      if echo $SCALE_X | grep -q "[^0-9.]"
      then
        echo "Invalid scale for x axis: $OPTARG" >&2
        exit
      fi
    ;;
    
    y)
      SCALE_Y=$OPTARG
      if echo $SCALE_Y | grep -q "[^0-9.]"
      then
        echo "Invalid scale for y axis: $OPTARG" >&2
        exit
      fi
    ;;
    
    X)
      PRE_TRIM=0
    ;;
    
    d)
      if [ $SHRINK_DRILL -eq 1 ]
      then
        REMOVE_TINY_HOLES=1
      else      
        SHRINK_DRILL=1  
      fi
    ;;
    
    D)
      SHOW_HOLES_IN_MASK=1
    ;;
    
    p) 
      B_WHITE=$OPTARG
      if echo $B_WHITE | grep -q "[^0-9.]"
      then
        echo "Invalid padding width: $OPTARG" >&2
        exit
      fi
    ;;
    
    b) 
      B_BLACK=$OPTARG
      if echo $B_BLACK | grep -q "[^0-9.]"
      then
        echo "Invalid border width: $OPTARG" >&2
        exit
      fi
    ;;
        
    s)
      B_SEPAR=$OPTARG
      if echo $B_SEPAR | grep -q "[^0-9.]"
      then
       echo "Invalid separation width: $OPTARG" >&2
       exit
      fi
    ;;
    
    r)
      RESOLUTION=$OPTARG
      if echo $RESOLUTION | grep -q "[^0-9]"
      then
        echo "Invalid Resolution: $OPTARG" >&2
        exit
      fi
    ;;
    
    V)
      UNBURY_HOLES=0
    ;;
    
    \?)
      echo "Unknown Option: -$OPTARG" >&2
      exit      
    ;;
  esac
done

shift $((OPTIND-1))
Z="$@" # I dunno what's going on here, test seems to misbehave if I use $@ there
test -n "$Z" && WHAT="$Z"

    #         exit             
# See if a layer is desired
function layer
{
  for word in $WHAT
  do
    [[ $word = $1 ]] && return 0
  done
  return 1
}

# Default to all layers turned on
if [ "$WHAT" = "" ]
then
  WHAT="copper mask silk top bottom"
elif ! ( layer top || layer bottom )
then
 WHAT="$WHAT top bottom"
fi
echo
echo "Settings"
echo "------------------------------------------------------"
echo "Resolution: $RESOLUTION (dpi)"
echo "Padding: $B_WHITE (mm)"
echo "Border: $B_BLACK (mm)"
echo "Separation: $B_SEPAR (mm)"
[ $ROTATE -eq 1 ] && echo "Rotate: On"
[ $ROTATE -eq 0 ] && echo "Rotate: Off"
echo "Negative Output: $NEGATIVE"
echo "Artwork To Create: $WHAT"
if [ $SHRINK_DRILL -eq 1 ] 
then
  echo "Shrink Drills By: $SHRINK_PERCENT%"
  echo "Minimum Drill Size: $SHRINK_MIN_METRIC mm"  
  if [ $REMOVE_TINY_HOLES -eq 1 ]
  then
    echo "Remove Tiny Drill Holes: On"
  else
    echo "Remove Tiny Drill Holes: Off"
  fi
fi
if [ $UNBURY_HOLES -eq 1 ]
then
  echo "Mask all through holes minimum: $UNBURY_DIAM_METRIC mm"  
fi
if [ $SHOW_HOLES_IN_MASK -eq 1 ]
then
  echo "Show drill holes in mask: On"
else
  echo "Show drill holes in mask: Off"
fi
[ "$SCALE_X" != "1" ] && echo "Scale X by: $SCALE_X"
[ "$SCALE_Y" != "1" ] && echo "Scale Y by: $SCALE_Y"
echo "------------------------------------------------------"
echo 

# This gets filled with some temporary files to delete
CLEANUP=

# Gerber Input
# Look for gerbers with standard extentions and rename them to some known file names
( ls | grep -i \\.gm1  >/dev/null ) && cp "$(ls | grep -i \\.gm1 | head -1)" BoardOutline.gbr   && CLEANUP="$CLEANUP BoardOutline.gbr"
( ls | grep -i \\.oln  >/dev/null ) && cp "$(ls | grep -i \\.oln | head -1)" BoardOutline.gbr   && CLEANUP="$CLEANUP BoardOutline.gbr"
( ls | grep -i Edges\\.gbr  >/dev/null ) && cp "$(ls | grep -i Edges\\.gbr | head -1)" BoardOutline.gbr   && CLEANUP="$CLEANUP BoardOutline.gbr"
( ls | grep -i \\.gko  >/dev/null ) && cp "$(ls | grep -i \\.gko | head -1)" BoardOutline.gbr   && CLEANUP="$CLEANUP BoardOutline.gbr"
( ls | grep -i  drill\\.txt >/dev/null) && cp "$(ls | grep -i drill\\.txt | head -1)" Holes.gbr && CLEANUP="$CLEANUP Holes.gbr"
( ls | grep -i  \\.drl >/dev/null) && cp "$(ls | grep -i \\.drl | head -1)" Holes.gbr && CLEANUP="$CLEANUP Holes.gbr"

# There might be multiple drill files (Plated, Via, Unplated etc) - this is common with EasyEDA
#  combine them all into Holes.gbr, we need to make the tools unique though, simply prefix with
#  an index number for simplicity, this limits us to 10 tools per file, but hopefully that's enough
#  for the vast majority of purposes.
if [ $(ls | grep -i \\.drl | wc -l) -gt 1 ]
then
  idx=0
  mergedtools=""
  mergedholes=""
  for DrillFile in $(ls | grep -i \\.drl)
  do
    SEEN_PERCENT=0
    for line in $(cat $DrillFile | sed -r "s/;.*//" | sed -r "s/M30//" | sed -r "s/M48//")
    do
      line="$(echo "$line" | sed -r "s/T0/T$idx/g")"
      if echo "$line" | grep "^%" >/dev/null
      then
        SEEN_PERCENT=1        
        continue
      fi
      
      if ! [ $SEEN_PERCENT -eq 1 ]
      then
        if [ $idx -gt 0 ]
        then
          # Only append tool lines not the units etc (assume all the same!)
          if echo "$line" | grep "^T" >/dev/null
          then
            mergedtools="$mergedtools\n$line"
          fi
        else
          mergedtools="$mergedtools\n$line"
        fi
      else
        mergedholes="$mergedholes\n$line"
      fi
    done
    
    idx=$(expr $idx + 1)
  done
  echo -e "M48\n$mergedtools\n%\n$mergedholes\nM30" >"Holes.gbr"
fi

if layer top 
then
  layer copper && ( ls | grep -i \\.gtl  >/dev/null ) && cp "$(ls | grep -i \\.gtl | head -1)" Top.gbr      && CLEANUP="$CLEANUP Top.gbr"
  layer silk   && ( ls | grep -i \\.gto  >/dev/null ) && cp "$(ls | grep -i \\.gto | head -1)" TopSilk.gbr  && CLEANUP="$CLEANUP TopSilk.gbr"
  layer mask   && ( ls | grep -i \\.gts  >/dev/null ) && cp "$(ls | grep -i \\.gts | head -1)" TopMask.gbr  && CLEANUP="$CLEANUP TopMask.gbr"
  layer paste  && ( ls | grep -i \\.gtp  >/dev/null ) && cp "$(ls | grep -i \\.gtp | head -1)" TopPaste.gbr  && CLEANUP="$CLEANUP TopPaste.gbr"
fi

if layer bottom
then
  layer copper && ( ls | grep -i \\.gbl >/dev/null  ) && cp "$(ls | grep -i \\.gbl | head -1)" Bottom.gbr    && CLEANUP="$CLEANUP Bottom.gbr"
  layer silk   && ( ls | grep -i \\.gbo >/dev/null  ) && cp "$(ls | grep -i \\.gbo | head -1)" BottomSilk.gbr  && CLEANUP="$CLEANUP BottomSilk.gbr"
  layer mask   && ( ls | grep -i \\.gbs >/dev/null  ) && cp "$(ls | grep -i \\.gbs | head -1)" BottomMask.gbr  && CLEANUP="$CLEANUP BottomMask.gbr"
  layer paste  && ( ls | grep -i \\.gbp  >/dev/null ) && cp "$(ls | grep -i \\.gbp | head -1)" BottomPaste.gbr  && CLEANUP="$CLEANUP BottomPaste.gbr"
fi


function calc
{
  bc -l <<EOF
  
# http://www.pixelbeat.org/scripts/bc
# License: LGPLv2
# Author:
#    http://www.pixelbeat.org/
# Notes:
#    I only use bc when python is not available.
#    Personally I have this file in ~/bin/bc so
#    that I can just invoke bc as normal and have these
#    extra functions available.
# Changes:
#    V0.1, 11 Apr 2007, Initial release

define twodp(x)
{
  oldscale = scale
  scale = 2
  x = x * 100
  y = x / 100
  scale = oldscale
  return y
}

define min(x,y) {
    if (x<y) return x
    return y
}

define max(x,y) {
    if (x>y) return x
    return y
}

define zeroifless(x,y) {
    if (x<y) return 0
    return x
}

define abs(x) {
    if (x<0) return -x
    return x
}

/* take integer part */
define int(x) {
    auto old_scale   /* variables global by default */
    old_scale=scale  /* scale is global */
    scale=0; ret=x/1
    scale=old_scale
    return ret
}

/* round to nearest integer */
define round(x) {
    if (x<0) x-=.5 else x+=.5
    return int(x)
}

/* smallest integer >= arg */
define ceil(x) {
    auto intx
    intx=int(x)
    if (intx<x) intx+=1
    return intx
}

/* largest integer <= arg */
define floor(x) {
    return -ceil(-x)
}

/* round x to previous multiple of y */
define round_down(x,y) {
    return y*floor(x/y)
}

/* round x to next multiple of y */
define round_up(x,y) {
    return y*ceil(x/y)
}

/* round x to nearest multiple of y */
define round_to(x,y) {
    return y*round(x/y)
}

/* Greatest Common Divisor or Highest Common Factor of x and y */
/* Note when people say Lowest Common Denominator they usually mean this */
define gcd(x,y) {
     if (y==0) return x
     return gcd(y,x%y) /* anything that divides into x and y also divides into the remainder of x/y */
}

/* Lowest Common Multiple of x and y */
/* Lowest Common Denominator of fractions is LCM of the denominators */
define lcm(x,y) {
    return (x*y/gcd(x,y))
}
    
    $1
EOF
}

function floor
{
  echo "scale = 0\n($1)/1" | bc -l
}

if ( [ -f Holes.gbr ] && [ $SHRINK_DRILL -eq 1 ] )
then
  # Shrink drill holes
  SEEN_PERCENT=0  
  UNITS=METRIC
  rm -f NewHoles.gbr
  for line in $(cat Holes.gbr)
  do
    # The first percent is the end of what we need to change
    
    if echo $line | grep "^%" >/dev/null
    then
      SEEN_PERCENT=1        
    fi
    
    if echo $line | grep "^INCH" >/dev/null
    then
      UNITS=INCH
    fi    
    
    if ! [ $SEEN_PERCENT -eq 1 ]
    then
      if ( echo "$line" | grep -Po "^T.*C(.*)$" >/dev/null )
      then      
        DRILL="$(echo $line | sed "s/^.*C//" | sed "s/\r//" )"    
        # echo "LINE $line"
        # echo "DRILL $DRILL"   
        
        if [ $UNITS = "METRIC" ]
        then
        
          NEWDRILL=$(calc "max(min($DRILL,$SHRINK_MIN_METRIC), ($DRILL * ((100 - $SHRINK_PERCENT) / 100)))")
          
          # gerbv doesn't like 0 size holes, so make it just very very tiny (0.0254 mm)
          if [ $REMOVE_TINY_HOLES -eq 1 ]
          then
            NEWDRILL=$(calc "max(0.0254, zeroifless($NEWDRILL, $SHRINK_MIN_METRIC * 0.99))");            
          fi
          echo "Resized $DRILL hole to $NEWDRILL"
        else
      
          NEWDRILL=$(calc "max(min($DRILL,$SHRINK_MIN_METRIC * 0.0393701), ($DRILL * ((100 - $SHRINK_PERCENT) / 100)))")
          
          # gerbv doesn't like 0 size holes, so make it just very very tiny (1 mil)
          if [ $REMOVE_TINY_HOLES -eq 1 ]
          then
            NEWDRILL=$(calc "max(0.001, zeroifless($NEWDRILL, $SHRINK_MIN_METRIC * 0.0393701))");            
          fi
          echo "Resized $(calc "twodp( round($DRILL * 25.4 * 100)/100 )")mm (${DRILL}\") hole to $(calc "twodp( round($NEWDRILL * 25.4 * 100)/100 )")mm ($(calc "twodp( round(${NEWDRILL}*100)/100)")\")"
        fi
        
        
        
        line="$(echo $line | sed -r "s/(.*C).*(\r?)/\1$NEWDRILL\2/")"
      fi      
    fi
    
    echo "$line" >>NewHoles.gbr    
  done
  cp NewHoles.gbr Holes.gbr
fi

if ( [ -f Holes.gbr ] && [ $UNBURY_HOLES -eq 1 ] )
then
  # Expand drill holes
  SEEN_PERCENT=0  
  UNITS=METRIC
  rm -f UnburyHoles.gbr
  for line in $(cat Holes.gbr)
  do
    # The first percent is the end of what we need to change
    
    if echo $line | grep "^%" >/dev/null
    then
      SEEN_PERCENT=1        
    fi
    
    if echo $line | grep "^INCH" >/dev/null
    then
      UNITS=INCH
    fi    
    
    if ! [ $SEEN_PERCENT -eq 1 ]
    then
      if ( echo "$line" | grep -Po "^T.*C(.*)$" >/dev/null )
      then      
        DRILL="$(echo $line | sed "s/^.*C//" | sed "s/\r//" )"    
        # echo "LINE $line"
        # echo "DRILL $DRILL"   
        
        if [ $UNITS = "METRIC" ]
        then        
          if [ $REMOVE_TINY_HOLES -eq 1 ] && [ $(calc "$DRILL <= 0.0254" ) -eq 1 ]
          then
            NEWDRILL="$DRILL"
          else          
            NEWDRILL=$(calc "max($UNBURY_DIAM_METRIC, $DRILL)")          
          fi
        else      
          if [ $REMOVE_TINY_HOLES -eq 1 ] && [ $(calc "$DRILL <= 0.001" ) -eq 1 ]
          then
            NEWDRILL="$DRILL"
          else
            NEWDRILL=$(calc "max($UNBURY_DIAM_METRIC * 0.0393701, $DRILL)")
          fi
        fi
                
        line="$(echo $line | sed -r "s/(.*C).*(\r?)/\1$NEWDRILL\2/")"
      fi      
    fi
    
    echo "$line" >>UnburyHoles.gbr    
  done
  CLEANUP="$CLEANUP UnburyHoles.gbr"
fi

# Convert the gerbers into pngs with some known file names
if ( [ -f Bottom.gbr ] || [ -f BottomMask.gbr ] || [ -f BottomSilk.gbr ] || [ -f BottomPaste.gbr ] || [ -f Top.gbr ] || [ -f TopMask.gbr ] || [ -f TopSilk.gbr ]  || [ -f TopPaste.gbr ])
then
  echo "Converting Gerbers To PNG"
  if layer bottom
  then
    GBR_DRILL="$( [ -f Holes.gbr ] && echo --foreground="#FFFFFFFF" Holes.gbr)"
    GBR_OUTLINE="$( [ -f BoardOutline.gbr ] && echo --foreground="#000000FF" BoardOutline.gbr)"   
    EXTRA_MASK="$( [ $SHOW_HOLES_IN_MASK = 1 ] && echo $GBR_DRILL ) $( [ -f UnburyHoles.gbr ] && echo --foreground="#000000FF" UnburyHoles.gbr)"
    
    layer copper \
      && [ -f Bottom.gbr ] \
      && gerbv -a --border=10 --background="#FFFFFF" --dpi=$RESOLUTION --output=copper_bottom.png    --export=png $GBR_DRILL  --foreground="#000000FF" Bottom.gbr $GBR_OUTLINE \
      && CLEANUP="$CLEANUP copper_bottom.png"
      
    layer mask \
      && [ -f BottomMask.gbr ] \
      && gerbv -a --border=10 --background="#FFFFFF" --dpi=$RESOLUTION --output=etch_mask_bottom.png --export=png $EXTRA_MASK  --foreground="#000000FF" BottomMask.gbr $GBR_OUTLINE \
      && CLEANUP="$CLEANUP etch_mask_bottom.png"
      
    layer silk \
      && [ -f BottomSilk.gbr ] \
      && gerbv -a --border=10 --background="#FFFFFF" --dpi=$RESOLUTION --output=silk_bottom.png      --export=png $GBR_DRILL  --foreground="#000000FF" BottomSilk.gbr $GBR_OUTLINE   \
      && CLEANUP="$CLEANUP silk_bottom.png"
      
    layer paste \
      && [ -f BottomPaste.gbr ] \
      && gerbv -a --border=10 --background="#FFFFFF" --dpi=$RESOLUTION --output=paste_bottom.png --export=png $EXTRA_MASK  --foreground="#000000FF" BottomPaste.gbr $GBR_OUTLINE \
      && CLEANUP="$CLEANUP paste_bottom.png"
  fi

  if layer top
  then
    GBR_OUTLINE="$( [ -f BoardOutline.gbr ] && echo --foreground="#000000FF" BoardOutline.gbr)"
    GBR_DRILL="$( [ -f Holes.gbr ] && echo --foreground="#FFFFFFFF" Holes.gbr)"
    EXTRA_MASK="$( [ $SHOW_HOLES_IN_MASK = 1 ] && echo $GBR_DRILL ) $( [ -f UnburyHoles.gbr ] && echo --foreground="#000000FF" UnburyHoles.gbr)"
    
    layer copper \
      && [ -f Top.gbr ] \
      && gerbv -a --border=10 --background="#FFFFFF" --dpi=$RESOLUTION --output=copper_top.png    --export=png $GBR_DRILL --foreground="#000000FF"  Top.gbr $GBR_OUTLINE \
      && convert -density $RESOLUTION copper_top.png -flop copper_top_mirror.png  \
      && CLEANUP="$CLEANUP copper_top_mirror.png copper_top.png"
      
    layer mask \
      && [ -f TopMask.gbr ] \
      && gerbv -a --border=10 --background="#FFFFFF" --dpi=$RESOLUTION --output=etch_mask_top.png --export=png $EXTRA_MASK --foreground="#000000FF"  TopMask.gbr  $GBR_OUTLINE \
      && convert -density $RESOLUTION etch_mask_top.png -flop etch_mask_top_mirror.png  \
      && CLEANUP="$CLEANUP etch_mask_top_mirror.png etch_mask_top.png"
      
    layer silk \
      && [ -f TopSilk.gbr ] \
      && gerbv -a --border=10 --background="#FFFFFF" --dpi=$RESOLUTION --output=silk_top.png      --export=png $GBR_DRILL --foreground="#000000FF"  TopSilk.gbr $GBR_OUTLINE \
      && convert -density $RESOLUTION silk_top.png -flop silk_top_mirror.png    \
      && CLEANUP="$CLEANUP silk_top_mirror.png silk_top.png"
      
    layer paste \
      && [ -f TopPaste.gbr ] \
      && gerbv -a --border=10 --background="#FFFFFF" --dpi=$RESOLUTION --output=paste_top.png --export=png $EXTRA_MASK --foreground="#000000FF"  TopPaste.gbr  $GBR_OUTLINE \
      && convert -density $RESOLUTION paste_top.png -flop paste_top_mirror.png  \
      && CLEANUP="$CLEANUP paste_top_mirror.png paste_top.png"
      
  fi  
fi



function need_invert
{
  for word in $NEGATIVE
  do
    if (echo $1 | grep -F $word - >/dev/null)
    then
      return 0
    fi
  done
  
  return 1
}

function out
{
        echo "out/$(basename $1).png"
}

# Convert MM to Pixels at $RESOLUTION  dpi
function mm_px
{
  # 25.4 mm per inch
  calc "( 1 / 25.4 * $RESOLUTION ) * ( $1 )" 
}

# Add registration
function alignments
{
  cp $1 $(out $1)
  chmod u+w $(out $1)
  
  echo $(out $1)
  
  # We want to use half the separation as the border
  B_HALF_SEPAR=$(calc "($B_SEPAR / 2)")

  # Vertical Bar Points 
  AX1=$(calc "0 + $(mm_px "$B_HALF_SEPAR")")
  AY1=$(mm_px "$B_HALF_SEPAR + $B_BLACK")
  AX2=$(calc "$AX1 - $(mm_px 1.25)")
  AY2=$(calc "$AY1 + $(mm_px 5)")

  # Horizontal Bar Points
  BX1=$(calc "0 + $(mm_px "$B_HALF_SEPAR + $B_BLACK")")
  BY1=$(mm_px "$B_HALF_SEPAR")
  BX2=$(calc "$BX1 + $(mm_px 10)")
  BY2=$(calc "$BY1 - $(mm_px 1.25)")

  POINTSIZE=$(calc "min(($(mm_px $(calc "$B_HALF_SEPAR * 0.8")) / $RESOLUTION * 72), 14)")
  
mogrify -density $RESOLUTION \
        $(need_invert $1 && echo "-monochrome -colors 2 -depth 1 -negate")  \
        $( [ $ROTATE -eq 1 ] && ( ( ( echo $1 | grep -q "top" ) && echo "-rotate -90 +repage") || ( ( echo $1 | grep -q "bottom" ) && echo "-rotate 90 +repage") ) ) \
        $( [ $PRE_TRIM -eq 1 ] && echo "-trim" ) \
        +repage \
    \
        -bordercolor white -border $(mm_px $B_WHITE)  \
        -bordercolor black -border $(mm_px $B_BLACK)  \
        -bordercolor white -border $(mm_px $B_HALF_SEPAR)  \
        +repage \
    \
        -fill black -gravity South -pointsize $POINTSIZE -annotate +0+$(mm_px $(calc "$B_HALF_SEPAR * 0.1")) $(if ( echo $1 | grep -q "top" ); then echo 'TOP'; else echo 'BOTTOM'; fi ) \
        +repage \
    \
        $(: @@@@ COMMENT -- alignment bars -- for the bottom side, add to top left, and remirror it back @@@@ ) \
        $( ( echo $1 | grep -q bottom ) && echo '-flop' )  \
        -fill black -strokewidth 0 -draw "rectangle $AX1,$AY1 $AX2,$AY2"\
        -fill black -strokewidth 0 -draw "rectangle $BX1,$BY1 $BX2,$BY2"\
        $( ( echo $1 | grep -q bottom ) && echo '-flop' ) \
        +repage \
    \
        $(: @@@@ COMMENT -- remove the far left or right separation border depending on top/bottom @@@@ ) \
        -gravity $(if ( echo $1 | grep -q "top" ); then echo East; else echo West; fi ) -chop $(mm_px $B_HALF_SEPAR)x0 \
        +repage \
      $(out $1) 2>/dev/null
# echo "Done"
   WIDTH=$(calc "floor(($(identify -format %w -density $RESOLUTION  $(out $1)) / $RESOLUTION ) * 25.4)" )
   HEIGHT=$(calc "floor(($(identify -format %h -density $RESOLUTION  $(out $1)) / $RESOLUTION ) * 25.4)" )
}

function scale_image
{
  
  local WIDTH=$(calc "floor($(identify -format %w -density $RESOLUTION  $1) * $SCALE_X)" )
  local HEIGHT=$(calc "floor($(identify -format %h -density $RESOLUTION  $1) * $SCALE_Y)" )
  echo "Scaling image: $1 to ${WIDTH}x${HEIGHT} from $(identify -format %w -density $RESOLUTION  $1)x$(identify -format %h -density $RESOLUTION  $1)"
  mogrify -resize ${WIDTH}x${HEIGHT}\! -density $RESOLUTION $1
}

echo "Creating Artworks"

rm -rf out
if [ ! -d out ]
then
  mkdir out
fi

COPPER_BOTTOM=$(ls | grep copper_bottom\\. | head -1)
COPPER_TOP=$(ls  | grep copper_top_mirror\\. | head -1)

MASK_BOTTOM=$(ls | grep etch_mask_bottom\\. | head -1)
MASK_TOP=$(ls | grep etch_mask_top_mirror\\. | head -1)

SILK_BOTTOM=$(ls | grep silk_bottom\\. | head -1)
SILK_TOP=$(ls | grep silk_top_mirror\\. | head -1)

PASTE_BOTTOM=$(ls | grep paste_bottom\\. | head -1)
PASTE_TOP=$(ls | grep paste_top_mirror\\. | head -1)

# This will be set by alignments, we use it later to decide if to use 2 columns in the pdf
# it is measured in mm at the target resolution
WIDTH= 
HEIGHT=

if layer copper
then
  layer bottom && [ -n "$COPPER_BOTTOM" ] && alignments $COPPER_BOTTOM
  layer top    && [ -n "$COPPER_TOP" ]    && alignments $COPPER_TOP  
fi

if layer mask
then
  layer bottom && [ -n "$MASK_BOTTOM" ]   && alignments $MASK_BOTTOM
  layer top    && [ -n "$MASK_TOP" ]      && alignments $MASK_TOP    
fi

if layer silk
then
  layer bottom && [ -n "$SILK_BOTTOM" ]   && alignments $SILK_BOTTOM
  layer top    && [ -n "$SILK_TOP" ]      && alignments $SILK_TOP      
fi

if layer paste
then
  layer bottom && [ -n "$PASTE_BOTTOM" ]   && alignments $PASTE_BOTTOM
  layer top    && [ -n "$PASTE_TOP" ]      && alignments $PASTE_TOP      
fi

echo "Creating PDF"
N_ACROSS=2
N_DOWN=3

# If two images do not fit across
if [ $(calc "$WIDTH * 2") -gt $MAX_PAGE_X_MM ]
then
  # If they would landscape wise, try that
  if [  $(calc "$WIDTH * 2") -lt $MAX_PAGE_Y_MM ]
  then
    TMP=$MAX_PAGE_X_MM
    MAX_PAGE_X_MM=$MAX_PAGE_Y_MM
    MAX_PAGE_Y_MM=$TMP
    
    # Also swap the scaling around as it would be printed
    # rotated by 90
    TMP=$SCALE_X
    SCALE_X=$SCALE_Y
    SCALE_Y=$TMP
  else
    # Otherwise, can only do 1 across
    N_ACROSS=1
  fi
fi

while [ $N_DOWN -gt 1 ] && [ $(calc "$N_DOWN * $HEIGHT") -gt $MAX_PAGE_Y_MM ]
do
  N_DOWN=$(calc "$N_DOWN - 1")
done

IMGS_PER_PAGE=$(calc "$N_DOWN * $N_ACROSS");
THIS_PAGE=
PAGENUM=1
LASTPAGENUM=
echo "Tiling $N_ACROSS x $N_DOWN per page."

for file in out/*.png
do
  [ "$SCALE_X" != "1" -o "$SCALE_Y" != "1" ] && scale_image $file
  THIS_PAGE="$THIS_PAGE $file"
  if [ $(echo $THIS_PAGE | wc -w) -eq $IMGS_PER_PAGE ]
  then
    echo "Creating page ${PAGENUM}..."
    montage -density $RESOLUTION -mode concatenate -tile ${N_ACROSS}x $THIS_PAGE out/page-${PAGENUM}.pdf 2>/dev/null
    THIS_PAGE=""
    LASTPAGENUM=$PAGENUM
    PAGENUM=$(calc "$PAGENUM + 1")    
  fi
done

if [ -n "$THIS_PAGE" ]
then
  echo "Creating page ${PAGENUM}..."
  montage -density $RESOLUTION -mode concatenate -tile ${N_ACROSS}x $THIS_PAGE out/page-${PAGENUM}.pdf 2>/dev/null
  LASTPAGENUM=$PAGENUM  
fi

if [ $LASTPAGENUM -lt 2 ]
then
  mv out/page-1.pdf artwork.pdf
elif which pdfjoin >/dev/null
then
  echo "Joining pages into artwork.pdf"
  pdfjoin -q --outfile artwork.pdf out/page-*.pdf 
else
  mv out/page-*.pdf ./
  echo "Notice: Multiple PDF documents created, see page-X.pdf ..."  
fi


echo "Done"
[ -n "$CLEANUP" ] && rm -f $CLEANUP
